name: Release Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from webcam_security import SecurityMonitor, Config
        from webcam_security.cli import app
        print('‚úÖ All imports successful')
        "
    
    - name: Build package
      run: |
        python -m build
        python -m twine check dist/*

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: python -m twine check dist/*
    
    - name: Generate version
      id: version
      run: |
        # Extract version from pyproject.toml
        VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          
          Automated release for version ${{ steps.version.outputs.version }}
          
          **Commit message:** ${{ github.event.head_commit.message }}
          
          ### Features
          - üé• Real-time motion detection using webcam
          - üì± Telegram notifications with snapshots
          - ‚è∞ Configurable monitoring hours (default: 10 PM - 6 AM)
          - üé¨ Automatic video recording on motion detection
          - üéµ Audio recording with video (combined MP4 format)
          - üßπ Automatic cleanup of old recordings
          - üñ•Ô∏è Live preview with monitoring status
          - üöÄ Easy-to-use CLI interface
          
          ### Installation
          ```bash
          pip install webcam-security
          ```
          
          ### Quick Start
          ```bash
          webcam-security init --bot-token "YOUR_BOT_TOKEN" --chat-id "YOUR_CHAT_ID"
          webcam-security start
          ```
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to PyPI
      if: github.ref == 'refs/heads/main'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true 