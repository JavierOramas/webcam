name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # FFmpeg is not easily available on Windows in CI
        # This is a limitation for Windows testing
        echo "FFmpeg not available on Windows CI"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run linting
      run: |
        # Basic linting checks
        python -m flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run type checking
      run: |
        python -m mypy src/ --ignore-missing-imports
    
    - name: Test imports
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from webcam_security import SecurityMonitor, Config
        from webcam_security.cli import app
        print('✅ All imports successful')
        "
    
    - name: Test configuration
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from webcam_security.config import Config
        
        # Test config creation
        config = Config(
            bot_token='test_token',
            chat_id='test_chat',
            topic_id='test_topic'
        )
        assert config.is_configured()
        print('✅ Configuration test passed')
        "
    
    - name: Build package
      run: |
        python -m build
        python -m twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist/ 